URL Scan Tool
Description
This tool provides a Python script for scanning URLs and assessing website risks through an API. It handles user authentication, registration, URL scanning with customizable scan options, and outputs scan results in multiple formats (JSON, text, and HTML). The tool is designed to simplify the process of analyzing websites for potential security risks.

Features
User authentication and registration.
Scanning URLs with configurable options.
Outputs results in JSON, plain text, and HTML format.
Error handling and detailed debug information.
Supports handling of screenshots within the HTML output.
Requirements
Python 3.x
Requests library
Installation
Clone the Repository
First, clone this repository to your local machine using:

bash
Copy code
git clone https://github.com/your-github-username/url-scan-tool.git
cd url-scan-tool
Install Dependencies
This project requires Python 3 and the following Python libraries installed:

Requests
You can install these packages via pip:

bash
Copy code
pip install requests
Usage
Setting Up Credentials
Login Credentials: Create a login.txt file in the root directory with your email and password formatted as email:password.
URL List: Create a url.txt file in the root directory with the list of URLs you want to scan, each on a new line.
Configuring Scan Options
Create a ScanOptions.txt file in the root directory to specify the scanning options. Use the following format:

vbnet
Copy code
dns_checks:true
ip_checks:false
page_checks:true
webtech_checks:true
Running the Script
To run the script, execute:

bash
Copy code
python urlscore.py
Output
The script saves the scan results in the ScanResults directory in three formats: JSON, plain text, and HTML. Each file will be named using the domain and the scan date/time.

Contributing
Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.

Fork the Project
Create your Feature Branch (git checkout -b feature/AmazingFeature)
Commit your Changes (git commit -m 'Add some AmazingFeature')
Push to the Branch (git push origin feature/AmazingFeature)
Open a Pull Request
License
Distributed under the MIT License. See LICENSE for more information.

Contact
info@urlscore.ai
